what is Javascript 
	Javascript is a scripting language, which can be used to perform client side scripting or server side scripting
Introduction to Javascript
	mainly javascript is used for client side scripting 
	we can develop dynamic web pages 
	we can modify html content , onclick='getElementById("html_id").innerHTML="modified Content"' 
	we can modify html attributes, onclick='getElementById("Attribute_id").Attribute="modified Content"'
	we can modify css conetnt , onclick='getElementById("html_id").style.Attribute="modified Content"'
	we can hide/unhide display content, onclick='getElementById("id").style.display="none/block"'  , none for hide and block for unhide
where to write js script tags
	inline text, same line on html 
	defining js text under script tag, scripts tag can be deinied under head tag or inside body tag
	external file, by using script tag including that external file in html 
Displaying Output 
	innerHTML, with the help of id we will display conetnt
	wirte, document.write("content"), without id we can display content
	alert, window.alert("content"), alert message on entering webpage
	console, console.log("content"), which will display content on console, to open console press F12
	print, onclick="print()", when ever user enters print button it will allow user to download webpage as pdf
Identifiers 
	Indentifies are nothing but varibale names or function names or constants
	can be started with letter(a-z) or underscore(_) ,  ex:- abc, _abc
	special characters are not allowed except '$' and '_'  ex:- hello$, Hello$_hi
	keywords cannot be used as Indentifies   ex:- break(invalid)
varibales
	varibales are declared using var keyword and thier paticular values of that varibales are assigned using assignment operator(=)
Datatypes
	In Javascript we have
		numbers ,  ex:- 1, 2.3 , even the float/decimal values are considered as numbers 
		string , ex:- 'hello', "hello", "hello's", 'hello"s' 
		boolean , ex:- true, false
		object(Array, name:value) , ex;- [1,2,3], {name:'shannu', age : 28}
		undefined , ex:- var a,  varibales which are declared but not initialized with values 
	Accessing elements in objects 
		var a=[1,2,4,5] 
			with the help of index posistion we can access elements , ex:- a[0], a[2] which gives 1,4
		var b={name:'shannu', age : 34}
			with the help of varibale we can access value , ex:- b.name, b.age which gives shannu, 34
Functions
	User Defined Functions
		Fucntions are declared using keyword function()
			Ex:- function fun_name(paranthesis){
				statement
				return
			}
		Here, paranthesis is input and statement is logic 
Conditional Statements
	if , else if, else 
	syntax:- if (condition)					if (condition)
				{								{
					statement						statement
				}								}
			 else if (condition)			else 
			 	{								{
					statement						statement
				}								}
			 else 
			 	{
					statement
				}
Switch Case
	if we need to check multiple selection , then we will consider siwth Case
	in siwth case, if given expression/value matches with anyone one of the label then it will excute that associated statement
	if we won't pass break then it will goes on continously checking all lablel
	break will take control out of switch case 
	In case of (expression/value) it will take only int,char,expression
	syntax : switch (expression/value)
				{
			case label 1 : statement;
							break;
			case label 2 : statement;
							break;
			case label 3 : statement;
							break;
			default : statement ;
						break;
				}	
Iterative Statements
	To excute multiple statement , we consider loops
	for and while loop											initilization;				
	syntax :- for (initilization; condition; updation)							while(condition)
					{										{	
						statement;									statement;
					}											updation;
															}	

Numbers
	In javascript , irrespective of Datatypes we can intialize varibales with var keyword
	In javascript , '6' is Numeric string    and   'ABC' is string
	In javascript , integer and decimal precision will have limit upto 15 digits for integer and 17 for decimal precision, after that it will give inaccurate values
	for numbers , while concatinating with string or performing some operations will show some different characters
	in Javascript , interpreter will consider from left to right , so that if addition is there it will add and do remaining operations
	In Addition
		8+2=10        int and int
		'8'+2=82		from left we have string , Here it will take it as string and string and return a string by concatinating  
		2+2+'8'=48		from left we have num , num, string, so here from left first it will add firt two and then it concatinate string 	
		'8'+2+2=822		from left we have string, so it will concatinate and then concatinated string will be again concatinated as string
	For remaining operations , it will remain same and whether it is numeric string or number it will consider it as int
		8-2=6		integer and integer
		'8'-'2'=6	here , we have numeric string and numeric string but it will consider it as integer and it will perform regular operation
		2-'8'=-6	here, integer and Numeric string , string will be consider as integer and perform regular expression
		'20'*10=200 here , Numeric string and integer , it will consider it as integer and multiplied 
		'20'/'10'=2		here, Numeric string and Numeric string , it will consider it as integer and divided
		'2'/0=Infinity  here, Numeric string and integer , it will consider it as integer and divided , which resulted infity because divided by zero
		'2'/'abc'=Nan   here, it is numeric string and string , so it will return Nan(Not a number)
Number Objects 
	with the help of new keyword we can create number objects in javascript
	syntax:-  var a = new Number(15) , it is number object  and b =10 is a integer 
		by using (==) we can compare values of integer and number object and it will return true 
			var a = new Number(10);   var b=10
			a==b , will return true
		and by using (===), we can compare datatypes 
			var a = new Number(10);   var b=10
			a===b will return False , bcz one is integer and another one is Number object 
		And we cannot compare number object and number object , it will always return False 
			var a = new Number(10);   var b=new Number(10)
			a==b , will always return False
	With the Help of typeof method we can get datatype of that varibale
	syntax:- var a = new Number(15)
			document.write(typeof a);        will return --> object 
	with the help of toString method we can convert number to string
	syntax:- var a = 15;
			 var s = a.toString()
			document.write(typeof s);         will return --> string
String Objects and String Methods
	with the help of new keyword , we can create string object 
	syntax : var s = new String('abcb')
	Length 
		Length of string can be calculated with Length Methods
		syntax : var b = s.length     -->3
	indexOf
		we can get index position of a given char/string in string and it will return first occurance of it 
		from left indexing starts from 0 and from right it starts from -1
		If the given char/string is not there in string , then it will return -1
		as a second argument we can pass we start index to start fetching the index from that index position

		syntax : var s1=s.indexOf('b',2)    -->  3
	lastIndexOf()
		var a = 'abcb'
		syntax : var s1=s.lastIndexOf('b')    -->  3
		If the given char/string is not there in string , then it will return -1
	search()
		search and indexof will work in a same way, but in search we cannot pass start index as second argument 
		syntax : var s1=s.search('b')    -->  1
	slice()
		will get mulitple characters  from given start index to end index 
			syntax : var s1=s.slice(0,2)    -->  ab
		by using negative index , we can get from last index to it 
			syntax : var s1=s.slice(-1,-3)    -->  bc
		we can pass both negative and positive 
			syntax : var s1=s.slice(-1,1)    -->  bcb
	substring()
		will get multiple characters from start index and end index
		both slice and substring will work in same way , but in this substring we cannot use negative indexing 
			syntax : var s1=s.substring(0,2)    -->  ab
	substr()
		will get multiple charcaters from start point to number of character given 
		in this from start index, we will define how characters to be fetched from that start point 
			syntax : var s1=s.substr(0,3)    -->  abc
	replace()
		we can replace first occurance of given character with new character
		it will only replace one character from first occurance
			syntax : var s1=s.replace('b','d')    -->  adcb
	toUpperCase()
		the characters in a given string will be converted to Upper case whether they are in small or upper
			syntax : var s1=s.toUpperCase()    -->  ABCB
	toLoweCase()
		the characters will be converted to lower case of a given string , whether they are in small or upper
			syntax : var s1=s.toLowerClase()    -->  abcb
	concat()
		this will add given string to another given string, 
		even we can add multiple string at a time 
			syntax : var s1=s.concat('hgf')    -->  abcbghf
			syntax : var s1=s.concat('hgf','ijk')    -->  abcbghfijk
	trim()
		it will remove empty spaces in the beggining of string or end of string 
		it will not remove spaces in between the string , only it will remove in the start and end
					 var s2= '  abcd  '
			syntax : var s1=s2.trim()    -->  abcb
	charAt()
		it will return the character of given index position in string
			syntax : var s1=s.charAt(1)    -->  b
	charCodeAt()
		it will return unicode(aski value) of given index position in string 
			syntax : var s1=s.charAt(1)    -->  98
	Accesing elements in string 
		syntax : var s1=s[3]     --> b
		with the help of above syntax we can access elements in given string by passing index position of element














	
	

		    
